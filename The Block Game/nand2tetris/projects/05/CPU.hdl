// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        //odredujemo jel instrukcija a ili c
        Not(in=instruction[15], out=Ainstr);
        Not(in=Ainstr,          out=Cinstr);
        
        //imamo li c instrukciju i je li njezino odrediste A registar(gledas A[5] to  je d1 gledaj tablicu)?
        And(a=Cinstr, b=instruction[5], out=ALUtoA);
        Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Ain);
        
        
        //upisujes u AREG ako je alu dozvolio ili ako je a instrukcija
        Or(a=Ainstr, b=ALUtoA, out=Aload);
        ARegister(in=Ain, load=Aload, out=Aout);
    	
        //u alu inputamo ili podatak iz a registra ili podatak iz memorije(iz inM)
        Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);

        //imamo li c instrukciju i je li njeno odredoiste Dreg(gledas A[4] to je d2 gledaj tablic)?
        And(a=Cinstr, b=instruction[4], out=Dload);
        DRegister(in=ALUout, load=Dload, out=Dout);


        ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], 
            zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
            out=ALUout, zr=ALUzr, ng=ALUng);    
        

        //outputi prema memoriji
        Or16(a=false, b=Aout, out[0..14]= addressM);
        Or16(a=false, b=ALUout, out=outM);
        And(a=Cinstr, b=instruction[3], out=writeM);


        //program counter i jump

        And(a=ALUzr, b=instruction[1], out=jeq);
        And(a=ALUng, b=instruction[2], out=jlt);

        Or(a=ALUzr, b=ALUng, out=negzr);
        Not(in=negzr, out=positive);

        And(a=positive, b=instruction[0], out=jgt);

        Or(a=jeq, b=jlt, out=jle);
        Or(a=jle, b=jgt, out=jmp);
        And(a=Cinstr, b=jmp, out=PCload);

        Not(in=PCload, out=PCinc);

        PC(in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);
}